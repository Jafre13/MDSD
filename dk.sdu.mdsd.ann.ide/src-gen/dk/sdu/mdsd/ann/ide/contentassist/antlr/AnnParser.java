/*
 * generated by Xtext 2.11.0
 */
package dk.sdu.mdsd.ann.ide.contentassist.antlr;

import com.google.inject.Inject;
import dk.sdu.mdsd.ann.ide.contentassist.antlr.internal.InternalAnnParser;
import dk.sdu.mdsd.ann.services.AnnGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AnnParser extends AbstractContentAssistParser {

	@Inject
	private AnnGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAnnParser createParser() {
		InternalAnnParser result = new InternalAnnParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLayerAccess().getAlternatives(), "rule__Layer__Alternatives");
					put(grammarAccess.getLearningRuleAccess().getAlternatives(), "rule__LearningRule__Alternatives");
					put(grammarAccess.getActivationAccess().getAlternatives(), "rule__Activation__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getMathAccess().getAlternatives(), "rule__Math__Alternatives");
					put(grammarAccess.getPartOperatorAccess().getAlternatives(), "rule__PartOperator__Alternatives");
					put(grammarAccess.getFactorOperatorAccess().getAlternatives(), "rule__FactorOperator__Alternatives");
					put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
					put(grammarAccess.getNumberTypesAccess().getAlternatives(), "rule__NumberTypes__Alternatives");
					put(grammarAccess.getANNModelAccess().getGroup(), "rule__ANNModel__Group__0");
					put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
					put(grammarAccess.getHiddenAccess().getGroup(), "rule__Hidden__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getExternalAccess().getGroup(), "rule__External__Group__0");
					put(grammarAccess.getCustomAccess().getGroup(), "rule__Custom__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
					put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getEulerAccess().getGroup(), "rule__Euler__Group__0");
					put(grammarAccess.getNLogAccess().getGroup(), "rule__NLog__Group__0");
					put(grammarAccess.getSinAccess().getGroup(), "rule__Sin__Group__0");
					put(grammarAccess.getCosAccess().getGroup(), "rule__Cos__Group__0");
					put(grammarAccess.getSqrtAccess().getGroup(), "rule__Sqrt__Group__0");
					put(grammarAccess.getPowerAccess().getGroup(), "rule__Power__Group__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
					put(grammarAccess.getLetterAccess().getGroup(), "rule__Letter__Group__0");
					put(grammarAccess.getANNModelAccess().getNameAssignment_0(), "rule__ANNModel__NameAssignment_0");
					put(grammarAccess.getANNModelAccess().getAlphaAssignment_3(), "rule__ANNModel__AlphaAssignment_3");
					put(grammarAccess.getANNModelAccess().getEpochsAssignment_5(), "rule__ANNModel__EpochsAssignment_5");
					put(grammarAccess.getANNModelAccess().getActivationAssignment_6(), "rule__ANNModel__ActivationAssignment_6");
					put(grammarAccess.getANNModelAccess().getLayerAssignment_7(), "rule__ANNModel__LayerAssignment_7");
					put(grammarAccess.getHiddenAccess().getSizeAssignment_3(), "rule__Hidden__SizeAssignment_3");
					put(grammarAccess.getHiddenAccess().getL_ruleAssignment_5(), "rule__Hidden__L_ruleAssignment_5");
					put(grammarAccess.getInputAccess().getSizeAssignment_3(), "rule__Input__SizeAssignment_3");
					put(grammarAccess.getOutputAccess().getSizeAssignment_3(), "rule__Output__SizeAssignment_3");
					put(grammarAccess.getOutputAccess().getL_ruleAssignment_5(), "rule__Output__L_ruleAssignment_5");
					put(grammarAccess.getLearningRuleAccess().getSigmoidAssignment_0(), "rule__LearningRule__SigmoidAssignment_0");
					put(grammarAccess.getLearningRuleAccess().getTansigAssignment_1(), "rule__LearningRule__TansigAssignment_1");
					put(grammarAccess.getLearningRuleAccess().getNamedFunctionAssignment_2(), "rule__LearningRule__NamedFunctionAssignment_2");
					put(grammarAccess.getExternalAccess().getNameAssignment_0(), "rule__External__NameAssignment_0");
					put(grammarAccess.getCustomAccess().getNameAssignment_0(), "rule__Custom__NameAssignment_0");
					put(grammarAccess.getCustomAccess().getInputAssignment_2(), "rule__Custom__InputAssignment_2");
					put(grammarAccess.getCustomAccess().getExpAssignment_7(), "rule__Custom__ExpAssignment_7");
					put(grammarAccess.getCustomAccess().getDerAssignment_10(), "rule__Custom__DerAssignment_10");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1(), "rule__Expression__OperatorAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getFactorAccess().getOperatorAssignment_1_1(), "rule__Factor__OperatorAssignment_1_1");
					put(grammarAccess.getFactorAccess().getRightAssignment_1_2(), "rule__Factor__RightAssignment_1_2");
					put(grammarAccess.getEulerAccess().getValueAssignment_2(), "rule__Euler__ValueAssignment_2");
					put(grammarAccess.getNLogAccess().getValueAssignment_2(), "rule__NLog__ValueAssignment_2");
					put(grammarAccess.getSinAccess().getValueAssignment_2(), "rule__Sin__ValueAssignment_2");
					put(grammarAccess.getCosAccess().getValueAssignment_2(), "rule__Cos__ValueAssignment_2");
					put(grammarAccess.getSqrtAccess().getValueAssignment_2(), "rule__Sqrt__ValueAssignment_2");
					put(grammarAccess.getPowerAccess().getBaseAssignment_2(), "rule__Power__BaseAssignment_2");
					put(grammarAccess.getPowerAccess().getExponentAssignment_4(), "rule__Power__ExponentAssignment_4");
					put(grammarAccess.getNumberLiteralAccess().getOperatorAssignment_0(), "rule__NumberLiteral__OperatorAssignment_0");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment_1(), "rule__NumberLiteral__ValueAssignment_1");
					put(grammarAccess.getLetterAccess().getOperatorAssignment_0(), "rule__Letter__OperatorAssignment_0");
					put(grammarAccess.getLetterAccess().getValueAssignment_1(), "rule__Letter__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AnnGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AnnGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
