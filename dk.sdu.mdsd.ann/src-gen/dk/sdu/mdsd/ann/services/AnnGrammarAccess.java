/*
 * generated by Xtext 2.11.0
 */
package dk.sdu.mdsd.ann.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AnnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ANNModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.ANNModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAlphaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlphaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlphaDECIMALParserRuleCall_3_0 = (RuleCall)cAlphaAssignment_3.eContents().get(0);
		private final Keyword cEpochsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEpochsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEpochsINTTerminalRuleCall_5_0 = (RuleCall)cEpochsAssignment_5.eContents().get(0);
		private final Assignment cActivationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActivationActivationParserRuleCall_6_0 = (RuleCall)cActivationAssignment_6.eContents().get(0);
		private final Assignment cLayerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLayerLayerParserRuleCall_7_0 = (RuleCall)cLayerAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ANNModel:
		//	name=ID '{'
		//	'alpha' alpha=DECIMAL
		//	'epochs' epochs=INT
		//	Activation+=Activation*
		//	Layer+=Layer* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'alpha' alpha=DECIMAL 'epochs' epochs=INT Activation+=Activation* Layer+=Layer* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'alpha'
		public Keyword getAlphaKeyword_2() { return cAlphaKeyword_2; }
		
		//alpha=DECIMAL
		public Assignment getAlphaAssignment_3() { return cAlphaAssignment_3; }
		
		//DECIMAL
		public RuleCall getAlphaDECIMALParserRuleCall_3_0() { return cAlphaDECIMALParserRuleCall_3_0; }
		
		//'epochs'
		public Keyword getEpochsKeyword_4() { return cEpochsKeyword_4; }
		
		//epochs=INT
		public Assignment getEpochsAssignment_5() { return cEpochsAssignment_5; }
		
		//INT
		public RuleCall getEpochsINTTerminalRuleCall_5_0() { return cEpochsINTTerminalRuleCall_5_0; }
		
		//Activation+=Activation*
		public Assignment getActivationAssignment_6() { return cActivationAssignment_6; }
		
		//Activation
		public RuleCall getActivationActivationParserRuleCall_6_0() { return cActivationActivationParserRuleCall_6_0; }
		
		//Layer+=Layer*
		public Assignment getLayerAssignment_7() { return cLayerAssignment_7; }
		
		//Layer
		public RuleCall getLayerLayerParserRuleCall_7_0() { return cLayerLayerParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Layer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHiddenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Layer:
		//	Hidden | Input | Output;
		@Override public ParserRule getRule() { return rule; }
		
		//Hidden | Input | Output
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Hidden
		public RuleCall getHiddenParserRuleCall_0() { return cHiddenParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Output
		public RuleCall getOutputParserRuleCall_2() { return cOutputParserRuleCall_2; }
	}
	public class HiddenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Hidden");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHiddenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cActivationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cL_ruleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cL_ruleLearningRuleParserRuleCall_5_0 = (RuleCall)cL_ruleAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Hidden:
		//	'hidden' '{'
		//	'size' size=INT
		//	'activation' l_rule=LearningRule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'hidden' '{' 'size' size=INT 'activation' l_rule=LearningRule '}'
		public Group getGroup() { return cGroup; }
		
		//'hidden'
		public Keyword getHiddenKeyword_0() { return cHiddenKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'activation'
		public Keyword getActivationKeyword_4() { return cActivationKeyword_4; }
		
		//l_rule=LearningRule
		public Assignment getL_ruleAssignment_5() { return cL_ruleAssignment_5; }
		
		//LearningRule
		public RuleCall getL_ruleLearningRuleParserRuleCall_5_0() { return cL_ruleLearningRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Input:
		//	'in' '{'
		//	'size' size=INT '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'in' '{' 'size' size=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cActivationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cL_ruleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cL_ruleLearningRuleParserRuleCall_5_0 = (RuleCall)cL_ruleAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Output:
		//	'out' '{'
		//	'size' size=INT
		//	'activation' l_rule=LearningRule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'out' '{' 'size' size=INT 'activation' l_rule=LearningRule '}'
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'activation'
		public Keyword getActivationKeyword_4() { return cActivationKeyword_4; }
		
		//l_rule=LearningRule
		public Assignment getL_ruleAssignment_5() { return cL_ruleAssignment_5; }
		
		//LearningRule
		public RuleCall getL_ruleLearningRuleParserRuleCall_5_0() { return cL_ruleLearningRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LearningRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.LearningRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSigmoidAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSigmoidSigmoidKeyword_0_0 = (Keyword)cSigmoidAssignment_0.eContents().get(0);
		private final Assignment cTansigAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTansigTansigKeyword_1_0 = (Keyword)cTansigAssignment_1.eContents().get(0);
		private final Assignment cNamedFunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cNamedFunctionActivationCrossReference_2_0 = (CrossReference)cNamedFunctionAssignment_2.eContents().get(0);
		private final RuleCall cNamedFunctionActivationIDTerminalRuleCall_2_0_1 = (RuleCall)cNamedFunctionActivationCrossReference_2_0.eContents().get(1);
		
		//LearningRule:
		//	Sigmoid?='sigmoid' | Tansig?='tansig' | namedFunction=[Activation];
		@Override public ParserRule getRule() { return rule; }
		
		//Sigmoid?='sigmoid' | Tansig?='tansig' | namedFunction=[Activation]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sigmoid?='sigmoid'
		public Assignment getSigmoidAssignment_0() { return cSigmoidAssignment_0; }
		
		//'sigmoid'
		public Keyword getSigmoidSigmoidKeyword_0_0() { return cSigmoidSigmoidKeyword_0_0; }
		
		//Tansig?='tansig'
		public Assignment getTansigAssignment_1() { return cTansigAssignment_1; }
		
		//'tansig'
		public Keyword getTansigTansigKeyword_1_0() { return cTansigTansigKeyword_1_0; }
		
		//namedFunction=[Activation]
		public Assignment getNamedFunctionAssignment_2() { return cNamedFunctionAssignment_2; }
		
		//[Activation]
		public CrossReference getNamedFunctionActivationCrossReference_2_0() { return cNamedFunctionActivationCrossReference_2_0; }
		
		//ID
		public RuleCall getNamedFunctionActivationIDTerminalRuleCall_2_0_1() { return cNamedFunctionActivationIDTerminalRuleCall_2_0_1; }
	}
	public class ActivationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Activation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Activation:
		//	External | Custom;
		@Override public ParserRule getRule() { return rule; }
		
		//External | Custom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//External
		public RuleCall getExternalParserRuleCall_0() { return cExternalParserRuleCall_0; }
		
		//Custom
		public RuleCall getCustomParserRuleCall_1() { return cCustomParserRuleCall_1; }
	}
	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cExternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//External:
		//	name=ID 'external';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'external'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'external'
		public Keyword getExternalKeyword_1() { return cExternalKeyword_1; }
	}
	public class CustomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Custom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputLetterParserRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFunctionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpExpressionParserRuleCall_7_0 = (RuleCall)cExpAssignment_7.eContents().get(0);
		private final Keyword cDerivativeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDerAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDerExpressionParserRuleCall_10_0 = (RuleCall)cDerAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Custom:
		//	name=ID '(' input=Letter ')' '{'
		//	'function' '=' exp=Expression
		//	'derivative' '=' der=Expression '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' input=Letter ')' '{' 'function' '=' exp=Expression 'derivative' '=' der=Expression '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//input=Letter
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//Letter
		public RuleCall getInputLetterParserRuleCall_2_0() { return cInputLetterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'function'
		public Keyword getFunctionKeyword_5() { return cFunctionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//exp=Expression
		public Assignment getExpAssignment_7() { return cExpAssignment_7; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_7_0() { return cExpExpressionParserRuleCall_7_0; }
		
		//'derivative'
		public Keyword getDerivativeKeyword_8() { return cDerivativeKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//der=Expression
		public Assignment getDerAssignment_10() { return cDerAssignment_10; }
		
		//Expression
		public RuleCall getDerExpressionParserRuleCall_10_0() { return cDerExpressionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPartLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPartOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Factor ({Part.left=current} operator=PartOperator right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Part.left=current} operator=PartOperator right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Part.left=current} operator=PartOperator right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Part.left=current}
		public Action getPartLeftAction_1_0() { return cPartLeftAction_1_0; }
		
		//operator=PartOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_1_1_0() { return cOperatorPartOperatorParserRuleCall_1_1_0; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFacLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorFactorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor Expression:
		//	Primary ({Fac.left=current} operator=FactorOperator right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Fac.left=current} operator=FactorOperator right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Fac.left=current} operator=FactorOperator right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Fac.left=current}
		public Action getFacLeftAction_1_0() { return cFacLeftAction_1_0; }
		
		//operator=FactorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//FactorOperator
		public RuleCall getOperatorFactorOperatorParserRuleCall_1_1_0() { return cOperatorFactorOperatorParserRuleCall_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cMathParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	Operand | '(' Expression ')' | Math;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand | '(' Expression ')' | Math
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_0() { return cOperandParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//Math
		public RuleCall getMathParserRuleCall_2() { return cMathParserRuleCall_2; }
	}
	public class MathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Math");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEulerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNLogParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCosParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSqrtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPowerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Math:
		//	Euler | NLog | Sin | Cos | Sqrt | Power;
		@Override public ParserRule getRule() { return rule; }
		
		//Euler | NLog | Sin | Cos | Sqrt | Power
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Euler
		public RuleCall getEulerParserRuleCall_0() { return cEulerParserRuleCall_0; }
		
		//NLog
		public RuleCall getNLogParserRuleCall_1() { return cNLogParserRuleCall_1; }
		
		//Sin
		public RuleCall getSinParserRuleCall_2() { return cSinParserRuleCall_2; }
		
		//Cos
		public RuleCall getCosParserRuleCall_3() { return cCosParserRuleCall_3; }
		
		//Sqrt
		public RuleCall getSqrtParserRuleCall_4() { return cSqrtParserRuleCall_4; }
		
		//Power
		public RuleCall getPowerParserRuleCall_5() { return cPowerParserRuleCall_5; }
	}
	public class EulerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Euler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Euler:
		//	'e' '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'e' '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'e'
		public Keyword getEKeyword_0() { return cEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NLogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.NLog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNlogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NLog:
		//	'nlog' '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'nlog' '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'nlog'
		public Keyword getNlogKeyword_0() { return cNlogKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Sin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sin:
		//	'sin' '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sin' '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'sin'
		public Keyword getSinKeyword_0() { return cSinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Cos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cos:
		//	'cos' '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'cos' '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'cos'
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SqrtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Sqrt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSqrtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sqrt:
		//	'sqrt' '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sqrt' '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'sqrt'
		public Keyword getSqrtKeyword_0() { return cSqrtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseExpressionParserRuleCall_2_0 = (RuleCall)cBaseAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExponentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExponentExpressionParserRuleCall_4_0 = (RuleCall)cExponentAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Power:
		//	'pow' '(' base=Expression ',' exponent=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pow' '(' base=Expression ',' exponent=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'pow'
		public Keyword getPowKeyword_0() { return cPowKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//base=Expression
		public Assignment getBaseAssignment_2() { return cBaseAssignment_2; }
		
		//Expression
		public RuleCall getBaseExpressionParserRuleCall_2_0() { return cBaseExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//exponent=Expression
		public Assignment getExponentAssignment_4() { return cExponentAssignment_4; }
		
		//Expression
		public RuleCall getExponentExpressionParserRuleCall_4_0() { return cExponentExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PartOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.PartOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PartOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class FactorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.FactorOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FactorOperator:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorPartOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberTypesParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral:
		//	operator=PartOperator?
		//	value=NumberTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=PartOperator? value=NumberTypes
		public Group getGroup() { return cGroup; }
		
		//operator=PartOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_0_0() { return cOperatorPartOperatorParserRuleCall_0_0; }
		
		//value=NumberTypes
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NumberTypes
		public RuleCall getValueNumberTypesParserRuleCall_1_0() { return cValueNumberTypesParserRuleCall_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLetterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand:
		//	Letter | NumberLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//Letter | NumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Letter
		public RuleCall getLetterParserRuleCall_0() { return cLetterParserRuleCall_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }
	}
	public class NumberTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.NumberTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECIMALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberTypes:
		//	DECIMAL | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_0() { return cDECIMALParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Letter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorPartOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Letter:
		//	operator=PartOperator?
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=PartOperator? value=ID
		public Group getGroup() { return cGroup; }
		
		//operator=PartOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_0_0() { return cOperatorPartOperatorParserRuleCall_0_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	
	
	private final ANNModelElements pANNModel;
	private final DECIMALElements pDECIMAL;
	private final LayerElements pLayer;
	private final HiddenElements pHidden;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final LearningRuleElements pLearningRule;
	private final ActivationElements pActivation;
	private final ExternalElements pExternal;
	private final CustomElements pCustom;
	private final ExpressionElements pExpression;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final MathElements pMath;
	private final EulerElements pEuler;
	private final NLogElements pNLog;
	private final SinElements pSin;
	private final CosElements pCos;
	private final SqrtElements pSqrt;
	private final PowerElements pPower;
	private final PartOperatorElements pPartOperator;
	private final FactorOperatorElements pFactorOperator;
	private final NumberLiteralElements pNumberLiteral;
	private final OperandElements pOperand;
	private final NumberTypesElements pNumberTypes;
	private final LetterElements pLetter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnnGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pANNModel = new ANNModelElements();
		this.pDECIMAL = new DECIMALElements();
		this.pLayer = new LayerElements();
		this.pHidden = new HiddenElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pLearningRule = new LearningRuleElements();
		this.pActivation = new ActivationElements();
		this.pExternal = new ExternalElements();
		this.pCustom = new CustomElements();
		this.pExpression = new ExpressionElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pMath = new MathElements();
		this.pEuler = new EulerElements();
		this.pNLog = new NLogElements();
		this.pSin = new SinElements();
		this.pCos = new CosElements();
		this.pSqrt = new SqrtElements();
		this.pPower = new PowerElements();
		this.pPartOperator = new PartOperatorElements();
		this.pFactorOperator = new FactorOperatorElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pOperand = new OperandElements();
		this.pNumberTypes = new NumberTypesElements();
		this.pLetter = new LetterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.ann.Ann".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ANNModel:
	//	name=ID '{'
	//	'alpha' alpha=DECIMAL
	//	'epochs' epochs=INT
	//	Activation+=Activation*
	//	Layer+=Layer* '}';
	public ANNModelElements getANNModelAccess() {
		return pANNModel;
	}
	
	public ParserRule getANNModelRule() {
		return getANNModelAccess().getRule();
	}
	
	//DECIMAL:
	//	INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//Layer:
	//	Hidden | Input | Output;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//Hidden:
	//	'hidden' '{'
	//	'size' size=INT
	//	'activation' l_rule=LearningRule '}';
	public HiddenElements getHiddenAccess() {
		return pHidden;
	}
	
	public ParserRule getHiddenRule() {
		return getHiddenAccess().getRule();
	}
	
	//Input:
	//	'in' '{'
	//	'size' size=INT '}';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'out' '{'
	//	'size' size=INT
	//	'activation' l_rule=LearningRule '}';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//LearningRule:
	//	Sigmoid?='sigmoid' | Tansig?='tansig' | namedFunction=[Activation];
	public LearningRuleElements getLearningRuleAccess() {
		return pLearningRule;
	}
	
	public ParserRule getLearningRuleRule() {
		return getLearningRuleAccess().getRule();
	}
	
	//Activation:
	//	External | Custom;
	public ActivationElements getActivationAccess() {
		return pActivation;
	}
	
	public ParserRule getActivationRule() {
		return getActivationAccess().getRule();
	}
	
	//External:
	//	name=ID 'external';
	public ExternalElements getExternalAccess() {
		return pExternal;
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}
	
	//Custom:
	//	name=ID '(' input=Letter ')' '{'
	//	'function' '=' exp=Expression
	//	'derivative' '=' der=Expression '}';
	public CustomElements getCustomAccess() {
		return pCustom;
	}
	
	public ParserRule getCustomRule() {
		return getCustomAccess().getRule();
	}
	
	//Expression:
	//	Factor ({Part.left=current} operator=PartOperator right=Factor)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Factor Expression:
	//	Primary ({Fac.left=current} operator=FactorOperator right=Primary)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary Expression:
	//	Operand | '(' Expression ')' | Math;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Math:
	//	Euler | NLog | Sin | Cos | Sqrt | Power;
	public MathElements getMathAccess() {
		return pMath;
	}
	
	public ParserRule getMathRule() {
		return getMathAccess().getRule();
	}
	
	//Euler:
	//	'e' '(' value=Expression ')';
	public EulerElements getEulerAccess() {
		return pEuler;
	}
	
	public ParserRule getEulerRule() {
		return getEulerAccess().getRule();
	}
	
	//NLog:
	//	'nlog' '(' value=Expression ')';
	public NLogElements getNLogAccess() {
		return pNLog;
	}
	
	public ParserRule getNLogRule() {
		return getNLogAccess().getRule();
	}
	
	//Sin:
	//	'sin' '(' value=Expression ')';
	public SinElements getSinAccess() {
		return pSin;
	}
	
	public ParserRule getSinRule() {
		return getSinAccess().getRule();
	}
	
	//Cos:
	//	'cos' '(' value=Expression ')';
	public CosElements getCosAccess() {
		return pCos;
	}
	
	public ParserRule getCosRule() {
		return getCosAccess().getRule();
	}
	
	//Sqrt:
	//	'sqrt' '(' value=Expression ')';
	public SqrtElements getSqrtAccess() {
		return pSqrt;
	}
	
	public ParserRule getSqrtRule() {
		return getSqrtAccess().getRule();
	}
	
	//Power:
	//	'pow' '(' base=Expression ',' exponent=Expression ')';
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//PartOperator:
	//	'+' | '-';
	public PartOperatorElements getPartOperatorAccess() {
		return pPartOperator;
	}
	
	public ParserRule getPartOperatorRule() {
		return getPartOperatorAccess().getRule();
	}
	
	//FactorOperator:
	//	'*' | '/';
	public FactorOperatorElements getFactorOperatorAccess() {
		return pFactorOperator;
	}
	
	public ParserRule getFactorOperatorRule() {
		return getFactorOperatorAccess().getRule();
	}
	
	//NumberLiteral:
	//	operator=PartOperator?
	//	value=NumberTypes;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//Operand:
	//	Letter | NumberLiteral;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//NumberTypes:
	//	DECIMAL | INT;
	public NumberTypesElements getNumberTypesAccess() {
		return pNumberTypes;
	}
	
	public ParserRule getNumberTypesRule() {
		return getNumberTypesAccess().getRule();
	}
	
	//Letter:
	//	operator=PartOperator?
	//	value=ID;
	public LetterElements getLetterAccess() {
		return pLetter;
	}
	
	public ParserRule getLetterRule() {
		return getLetterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
