/*
 * generated by Xtext 2.11.0
 */
grammar InternalAnn;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.sdu.mdsd.ann.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.mdsd.ann.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.mdsd.ann.services.AnnGrammarAccess;

}

@parser::members {

 	private AnnGrammarAccess grammarAccess;

    public InternalAnnParser(TokenStream input, AnnGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ANNModel";
   	}

   	@Override
   	protected AnnGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleANNModel
entryRuleANNModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANNModelRule()); }
	iv_ruleANNModel=ruleANNModel
	{ $current=$iv_ruleANNModel.current; }
	EOF;

// Rule ANNModel
ruleANNModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getANNModelAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getANNModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getANNModelAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='alpha'
		{
			newLeafNode(otherlv_2, grammarAccess.getANNModelAccess().getAlphaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getANNModelAccess().getAlphaDECIMALParserRuleCall_3_0());
				}
				lv_alpha_3_0=ruleDECIMAL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getANNModelRule());
					}
					set(
						$current,
						"alpha",
						lv_alpha_3_0,
						"dk.sdu.mdsd.ann.Ann.DECIMAL");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='epochs'
		{
			newLeafNode(otherlv_4, grammarAccess.getANNModelAccess().getEpochsKeyword_4());
		}
		(
			(
				lv_epochs_5_0=RULE_INT
				{
					newLeafNode(lv_epochs_5_0, grammarAccess.getANNModelAccess().getEpochsINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getANNModelRule());
					}
					setWithLastConsumed(
						$current,
						"epochs",
						lv_epochs_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getANNModelAccess().getActivationActivationParserRuleCall_6_0());
				}
				lv_Activation_6_0=ruleActivation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getANNModelRule());
					}
					add(
						$current,
						"Activation",
						lv_Activation_6_0,
						"dk.sdu.mdsd.ann.Ann.Activation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getANNModelAccess().getLayerLayerParserRuleCall_7_0());
				}
				lv_Layer_7_0=ruleLayer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getANNModelRule());
					}
					add(
						$current,
						"Layer",
						lv_Layer_7_0,
						"dk.sdu.mdsd.ann.Ann.Layer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getANNModelAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleDECIMAL
entryRuleDECIMAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDECIMALRule()); }
	iv_ruleDECIMAL=ruleDECIMAL
	{ $current=$iv_ruleDECIMAL.current.getText(); }
	EOF;

// Rule DECIMAL
ruleDECIMAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECIMALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleLayer
entryRuleLayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayerRule()); }
	iv_ruleLayer=ruleLayer
	{ $current=$iv_ruleLayer.current; }
	EOF;

// Rule Layer
ruleLayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLayerAccess().getHiddenParserRuleCall_0());
		}
		this_Hidden_0=ruleHidden
		{
			$current = $this_Hidden_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLayerAccess().getInputParserRuleCall_1());
		}
		this_Input_1=ruleInput
		{
			$current = $this_Input_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLayerAccess().getOutputParserRuleCall_2());
		}
		this_Output_2=ruleOutput
		{
			$current = $this_Output_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHidden
entryRuleHidden returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHiddenRule()); }
	iv_ruleHidden=ruleHidden
	{ $current=$iv_ruleHidden.current; }
	EOF;

// Rule Hidden
ruleHidden returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='hidden'
		{
			newLeafNode(otherlv_0, grammarAccess.getHiddenAccess().getHiddenKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getHiddenAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='size'
		{
			newLeafNode(otherlv_2, grammarAccess.getHiddenAccess().getSizeKeyword_2());
		}
		(
			(
				lv_size_3_0=RULE_INT
				{
					newLeafNode(lv_size_3_0, grammarAccess.getHiddenAccess().getSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHiddenRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='activation'
		{
			newLeafNode(otherlv_4, grammarAccess.getHiddenAccess().getActivationKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHiddenAccess().getL_ruleLearningRuleParserRuleCall_5_0());
				}
				lv_l_rule_5_0=ruleLearningRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHiddenRule());
					}
					set(
						$current,
						"l_rule",
						lv_l_rule_5_0,
						"dk.sdu.mdsd.ann.Ann.LearningRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getHiddenAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='in'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputAccess().getInKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='size'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputAccess().getSizeKeyword_2());
		}
		(
			(
				lv_size_3_0=RULE_INT
				{
					newLeafNode(lv_size_3_0, grammarAccess.getInputAccess().getSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='out'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='size'
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getSizeKeyword_2());
		}
		(
			(
				lv_size_3_0=RULE_INT
				{
					newLeafNode(lv_size_3_0, grammarAccess.getOutputAccess().getSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='activation'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getActivationKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getL_ruleLearningRuleParserRuleCall_5_0());
				}
				lv_l_rule_5_0=ruleLearningRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"l_rule",
						lv_l_rule_5_0,
						"dk.sdu.mdsd.ann.Ann.LearningRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleLearningRule
entryRuleLearningRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLearningRuleRule()); }
	iv_ruleLearningRule=ruleLearningRule
	{ $current=$iv_ruleLearningRule.current; }
	EOF;

// Rule LearningRule
ruleLearningRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_Sigmoid_0_0='sigmoid'
				{
					newLeafNode(lv_Sigmoid_0_0, grammarAccess.getLearningRuleAccess().getSigmoidSigmoidKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLearningRuleRule());
					}
					setWithLastConsumed($current, "Sigmoid", true, "sigmoid");
				}
			)
		)
		    |
		(
			(
				lv_Tansig_1_0='tansig'
				{
					newLeafNode(lv_Tansig_1_0, grammarAccess.getLearningRuleAccess().getTansigTansigKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLearningRuleRule());
					}
					setWithLastConsumed($current, "Tansig", true, "tansig");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLearningRuleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLearningRuleAccess().getNamedFunctionActivationCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleActivation
entryRuleActivation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivationRule()); }
	iv_ruleActivation=ruleActivation
	{ $current=$iv_ruleActivation.current; }
	EOF;

// Rule Activation
ruleActivation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActivationAccess().getExternalParserRuleCall_0());
		}
		this_External_0=ruleExternal
		{
			$current = $this_External_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivationAccess().getCustomParserRuleCall_1());
		}
		this_Custom_1=ruleCustom
		{
			$current = $this_Custom_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExternal
entryRuleExternal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalRule()); }
	iv_ruleExternal=ruleExternal
	{ $current=$iv_ruleExternal.current; }
	EOF;

// Rule External
ruleExternal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='external'
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalAccess().getExternalKeyword_1());
		}
	)
;

// Entry rule entryRuleCustom
entryRuleCustom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomRule()); }
	iv_ruleCustom=ruleCustom
	{ $current=$iv_ruleCustom.current; }
	EOF;

// Rule Custom
ruleCustom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCustomAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCustomAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomAccess().getInputLetterParserRuleCall_2_0());
				}
				lv_input_2_0=ruleLetter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomRule());
					}
					set(
						$current,
						"input",
						lv_input_2_0,
						"dk.sdu.mdsd.ann.Ann.Letter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getCustomAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='function'
		{
			newLeafNode(otherlv_5, grammarAccess.getCustomAccess().getFunctionKeyword_5());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getCustomAccess().getEqualsSignKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomAccess().getExpExpressionParserRuleCall_7_0());
				}
				lv_exp_7_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomRule());
					}
					set(
						$current,
						"exp",
						lv_exp_7_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='derivative'
		{
			newLeafNode(otherlv_8, grammarAccess.getCustomAccess().getDerivativeKeyword_8());
		}
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getCustomAccess().getEqualsSignKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomAccess().getDerExpressionParserRuleCall_10_0());
				}
				lv_der_10_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomRule());
					}
					set(
						$current,
						"der",
						lv_der_10_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getCustomAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getPartLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getOperatorPartOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=rulePartOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.sdu.mdsd.ann.Ann.PartOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightFactorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.ann.Ann.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFactorAccess().getFacLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getOperatorFactorOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleFactorOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.sdu.mdsd.ann.Ann.FactorOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.ann.Ann.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getOperandParserRuleCall_0());
		}
		this_Operand_0=ruleOperand
		{
			$current = $this_Operand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_1_1());
			}
			this_Expression_2=ruleExpression
			{
				$current = $this_Expression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getMathParserRuleCall_2());
		}
		this_Math_4=ruleMath
		{
			$current = $this_Math_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMath
entryRuleMath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathRule()); }
	iv_ruleMath=ruleMath
	{ $current=$iv_ruleMath.current; }
	EOF;

// Rule Math
ruleMath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMathAccess().getEulerParserRuleCall_0());
		}
		this_Euler_0=ruleEuler
		{
			$current = $this_Euler_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMathAccess().getNLogParserRuleCall_1());
		}
		this_NLog_1=ruleNLog
		{
			$current = $this_NLog_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMathAccess().getSinParserRuleCall_2());
		}
		this_Sin_2=ruleSin
		{
			$current = $this_Sin_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMathAccess().getCosParserRuleCall_3());
		}
		this_Cos_3=ruleCos
		{
			$current = $this_Cos_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMathAccess().getSqrtParserRuleCall_4());
		}
		this_Sqrt_4=ruleSqrt
		{
			$current = $this_Sqrt_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMathAccess().getPowerParserRuleCall_5());
		}
		this_Power_5=rulePower
		{
			$current = $this_Power_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEuler
entryRuleEuler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEulerRule()); }
	iv_ruleEuler=ruleEuler
	{ $current=$iv_ruleEuler.current; }
	EOF;

// Rule Euler
ruleEuler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='e'
		{
			newLeafNode(otherlv_0, grammarAccess.getEulerAccess().getEKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEulerAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEulerAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEulerRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEulerAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNLog
entryRuleNLog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNLogRule()); }
	iv_ruleNLog=ruleNLog
	{ $current=$iv_ruleNLog.current; }
	EOF;

// Rule NLog
ruleNLog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='nlog'
		{
			newLeafNode(otherlv_0, grammarAccess.getNLogAccess().getNlogKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNLogAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNLogAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNLogRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNLogAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSin
entryRuleSin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSinRule()); }
	iv_ruleSin=ruleSin
	{ $current=$iv_ruleSin.current; }
	EOF;

// Rule Sin
ruleSin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sin'
		{
			newLeafNode(otherlv_0, grammarAccess.getSinAccess().getSinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSinAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSinAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSinRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSinAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleCos
entryRuleCos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCosRule()); }
	iv_ruleCos=ruleCos
	{ $current=$iv_ruleCos.current; }
	EOF;

// Rule Cos
ruleCos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cos'
		{
			newLeafNode(otherlv_0, grammarAccess.getCosAccess().getCosKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCosAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCosAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCosRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCosAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSqrt
entryRuleSqrt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSqrtRule()); }
	iv_ruleSqrt=ruleSqrt
	{ $current=$iv_ruleSqrt.current; }
	EOF;

// Rule Sqrt
ruleSqrt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sqrt'
		{
			newLeafNode(otherlv_0, grammarAccess.getSqrtAccess().getSqrtKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSqrtAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSqrtAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSqrtRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSqrtAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePower
entryRulePower returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	iv_rulePower=rulePower
	{ $current=$iv_rulePower.current; }
	EOF;

// Rule Power
rulePower returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pow'
		{
			newLeafNode(otherlv_0, grammarAccess.getPowerAccess().getPowKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPowerAccess().getBaseExpressionParserRuleCall_2_0());
				}
				lv_base_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPowerRule());
					}
					set(
						$current,
						"base",
						lv_base_2_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getPowerAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPowerAccess().getExponentExpressionParserRuleCall_4_0());
				}
				lv_exponent_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPowerRule());
					}
					set(
						$current,
						"exponent",
						lv_exponent_4_0,
						"dk.sdu.mdsd.ann.Ann.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPowerAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePartOperator
entryRulePartOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPartOperatorRule()); }
	iv_rulePartOperator=rulePartOperator
	{ $current=$iv_rulePartOperator.current.getText(); }
	EOF;

// Rule PartOperator
rulePartOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPartOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPartOperatorAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleFactorOperator
entryRuleFactorOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFactorOperatorRule()); }
	iv_ruleFactorOperator=ruleFactorOperator
	{ $current=$iv_ruleFactorOperator.current.getText(); }
	EOF;

// Rule FactorOperator
ruleFactorOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFactorOperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFactorOperatorAccess().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberLiteralAccess().getOperatorPartOperatorParserRuleCall_0_0());
				}
				lv_operator_0_0=rulePartOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"dk.sdu.mdsd.ann.Ann.PartOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNumberTypesParserRuleCall_1_0());
				}
				lv_value_1_0=ruleNumberTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"dk.sdu.mdsd.ann.Ann.NumberTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandAccess().getLetterParserRuleCall_0());
		}
		this_Letter_0=ruleLetter
		{
			$current = $this_Letter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getNumberLiteralParserRuleCall_1());
		}
		this_NumberLiteral_1=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberTypes
entryRuleNumberTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberTypesRule()); }
	iv_ruleNumberTypes=ruleNumberTypes
	{ $current=$iv_ruleNumberTypes.current.getText(); }
	EOF;

// Rule NumberTypes
ruleNumberTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberTypesAccess().getDECIMALParserRuleCall_0());
		}
		this_DECIMAL_0=ruleDECIMAL
		{
			$current.merge(this_DECIMAL_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getNumberTypesAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLetter
entryRuleLetter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetterRule()); }
	iv_ruleLetter=ruleLetter
	{ $current=$iv_ruleLetter.current; }
	EOF;

// Rule Letter
ruleLetter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLetterAccess().getOperatorPartOperatorParserRuleCall_0_0());
				}
				lv_operator_0_0=rulePartOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetterRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"dk.sdu.mdsd.ann.Ann.PartOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_ID
				{
					newLeafNode(lv_value_1_0, grammarAccess.getLetterAccess().getValueIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
