/**
 * generated by Xtext 2.11.0
 */
package dk.sdu.mdsd.ann.ann.impl;

import dk.sdu.mdsd.ann.ann.Activation;
import dk.sdu.mdsd.ann.ann.AnnPackage;
import dk.sdu.mdsd.ann.ann.LearningRule;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Learning Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mdsd.ann.ann.impl.LearningRuleImpl#isSigmoid <em>Sigmoid</em>}</li>
 *   <li>{@link dk.sdu.mdsd.ann.ann.impl.LearningRuleImpl#isTansig <em>Tansig</em>}</li>
 *   <li>{@link dk.sdu.mdsd.ann.ann.impl.LearningRuleImpl#getNamedFunction <em>Named Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LearningRuleImpl extends MinimalEObjectImpl.Container implements LearningRule
{
  /**
   * The default value of the '{@link #isSigmoid() <em>Sigmoid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSigmoid()
   * @generated
   * @ordered
   */
  protected static final boolean SIGMOID_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSigmoid() <em>Sigmoid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSigmoid()
   * @generated
   * @ordered
   */
  protected boolean sigmoid = SIGMOID_EDEFAULT;

  /**
   * The default value of the '{@link #isTansig() <em>Tansig</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTansig()
   * @generated
   * @ordered
   */
  protected static final boolean TANSIG_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTansig() <em>Tansig</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTansig()
   * @generated
   * @ordered
   */
  protected boolean tansig = TANSIG_EDEFAULT;

  /**
   * The cached value of the '{@link #getNamedFunction() <em>Named Function</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamedFunction()
   * @generated
   * @ordered
   */
  protected Activation namedFunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LearningRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnnPackage.Literals.LEARNING_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSigmoid()
  {
    return sigmoid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSigmoid(boolean newSigmoid)
  {
    boolean oldSigmoid = sigmoid;
    sigmoid = newSigmoid;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnnPackage.LEARNING_RULE__SIGMOID, oldSigmoid, sigmoid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTansig()
  {
    return tansig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTansig(boolean newTansig)
  {
    boolean oldTansig = tansig;
    tansig = newTansig;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnnPackage.LEARNING_RULE__TANSIG, oldTansig, tansig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Activation getNamedFunction()
  {
    if (namedFunction != null && namedFunction.eIsProxy())
    {
      InternalEObject oldNamedFunction = (InternalEObject)namedFunction;
      namedFunction = (Activation)eResolveProxy(oldNamedFunction);
      if (namedFunction != oldNamedFunction)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AnnPackage.LEARNING_RULE__NAMED_FUNCTION, oldNamedFunction, namedFunction));
      }
    }
    return namedFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Activation basicGetNamedFunction()
  {
    return namedFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNamedFunction(Activation newNamedFunction)
  {
    Activation oldNamedFunction = namedFunction;
    namedFunction = newNamedFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnnPackage.LEARNING_RULE__NAMED_FUNCTION, oldNamedFunction, namedFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnnPackage.LEARNING_RULE__SIGMOID:
        return isSigmoid();
      case AnnPackage.LEARNING_RULE__TANSIG:
        return isTansig();
      case AnnPackage.LEARNING_RULE__NAMED_FUNCTION:
        if (resolve) return getNamedFunction();
        return basicGetNamedFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnnPackage.LEARNING_RULE__SIGMOID:
        setSigmoid((Boolean)newValue);
        return;
      case AnnPackage.LEARNING_RULE__TANSIG:
        setTansig((Boolean)newValue);
        return;
      case AnnPackage.LEARNING_RULE__NAMED_FUNCTION:
        setNamedFunction((Activation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnnPackage.LEARNING_RULE__SIGMOID:
        setSigmoid(SIGMOID_EDEFAULT);
        return;
      case AnnPackage.LEARNING_RULE__TANSIG:
        setTansig(TANSIG_EDEFAULT);
        return;
      case AnnPackage.LEARNING_RULE__NAMED_FUNCTION:
        setNamedFunction((Activation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnnPackage.LEARNING_RULE__SIGMOID:
        return sigmoid != SIGMOID_EDEFAULT;
      case AnnPackage.LEARNING_RULE__TANSIG:
        return tansig != TANSIG_EDEFAULT;
      case AnnPackage.LEARNING_RULE__NAMED_FUNCTION:
        return namedFunction != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (Sigmoid: ");
    result.append(sigmoid);
    result.append(", Tansig: ");
    result.append(tansig);
    result.append(')');
    return result.toString();
  }

} //LearningRuleImpl
